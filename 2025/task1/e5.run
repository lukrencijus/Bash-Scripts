#!/usr/bin/env bash
PATH=.

value="$1"
file="$2"

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <numeric_value> <log_file.log>"
    exit 1
fi

if [[ -z "$value" || -z "$file" ]]; then
    echo "Usage: $0 <numeric_value> <log_file.log>"
    exit 1
fi

if [ ! -f "$file" ]; then
    echo "File not found"
	exit 1
fi

check () {
    time_diff=$((SECONDS - last_check_time))
    
    if [ $time_diff -eq 0 ]; then
        return
    fi

    mapfile -t lines < "$file"
    updated_selected_lines=""
    for ((i=$value; i<0; i++)); do
        updated_selected_lines+="${lines[$i]}"$'\n'
    done

    if [ "$original_selected_lines" != "$updated_selected_lines" ]; then
        echo
        echo
        echo
        echo "Elapsed time: $SECONDS seconds"
        echo "File change found:"
        printing
        original_selected_lines="$updated_selected_lines"
        echo "Waiting for new file changes..."
        echo "Use Ctrl+C to stop"
    fi

    last_check_time=$SECONDS
}

printing () {
    result=""
    mapfile -t lines < "$file"   
    for ((i=$value; i<0; i++)); do
        echo "${lines[$i]}"
        result+="${lines[$i]}"$'\n'
    done
    columns "$result"
}

waiting () {
    echo
    echo "Waiting for new file changes..."
    echo "Use Ctrl+C to stop"
    while [ true ]; do
        check
        read -t 1 < /dev/null
    done
}

columns() {
    local numeric_file="$1"
    local -a strings=()
    local col_count=0
    
    while IFS= read -r line; do
        eval "row=($line)"
        strings+=("${row[@]}")
        if [ $col_count -eq 0 ]; then
            col_count=${#row[@]}
        fi
    done <<< "$numeric_file"

    for ((col=0; col<col_count; col++)); do
        echo "Column $((col+1)) frequencies:"
        declare -A freq=()
        for ((i=col; i<${#strings[@]}; i+=col_count)); do
            ((freq[${strings[$i]}]++))
        done

        for string in "${!freq[@]}"; do
            echo "    $string: ${freq[$string]}"
        done
        echo "---------------------"
    done
}

while IFS= read -r line || [ -n "$line" ]; do
    (( rows++ ))
done < "$file"

if [ "$value" -gt "$rows" ]; then
    echo "Entered numeric_value is greater than file's row count"
    exit 1
fi

value=$((value * -1))
mapfile -t lines < "$file"

original_selected_lines=""
for ((i=$value; i<0; i++)); do
    original_selected_lines+="${lines[$i]}"$'\n'
done
last_check_time=0

printing
waiting