#!/usr/bin/env bash
PATH=.

help_function() {
    echo "Usage: $0 <directory> <parameters>
    <directory>   (Mandatory) Catalog path from where to start to.
    -a            All files are listed. if not specified, hidden files and catalogues are not listed.
    -d            List directories only.
    -l            Follow symbolic links like directories.
    -f            Print the full path prefix for each file.
    -L level      Descend only level directories deep.
    -R            Rerun the tree when the max dir level is reached (restart your tree program as a child in the level).
    -P pattern    List only those files that match the pattern given.
    -I pattern    Do not list files that match the given pattern.
    -h            Help (this message)."
}

print_files_recursively() {
    local dir="$1"
    echo "$dir"
    for item in "$dir"/* "$dir"/.*; do
        if [ -f "$item" ]; then
            echo "$item"
        elif [ -d "$item" ]; then
            print_files_recursively "$item"
        fi
    done
}

d_flag_function() {
    local dir="$1"
    echo "$dir"  # Print the current directory

    for file in "$dir"/* "$dir"/.*; do
        # Skip the special entries "." and ".."
        if [ "$file" = "$dir/." ] || [ "$file" = "$dir/.." ]; then
            continue
        fi

        if [ -d "$file" ]; then
            echo "$file"  # Print the subdirectory
            d_flag_function "$file"  # Recursively process subdirectories
        fi
    done
}

if [ "$#" -eq 0 ]; then
    help_function
    exit 1
fi

path=$1

if [ ! -e "$path" ]; then
    echo "Path: $path does not exist"
    exit 1
elif [ ! -d "$path" ]; then
    echo "Path: $path is not a directory"
    exit 1
fi

a_flag=false
d_flag=false
l_flag=false
f_flag=false
L_value=""
R_flag=false
P_value=""
I_value=""
h_flag=false

while [[ "$#" -gt 1 ]]; do
    if [[ "$2" =~ ^-([a-zA-Z]+)$ ]]; then
        combined_flags="${BASH_REMATCH[1]}"
        for (( i=0; i<${#combined_flags}; i++ )); do
            flag="${combined_flags:$i:1}"
            case "$flag" in
                a) a_flag=true ;;
                d) d_flag=true ;;
                l) l_flag=true ;;
                f) f_flag=true ;;
                L) 
                    if [[ "$#" -gt 2 && ! "$3" =~ ^- ]]; then
                        L_value="$3"
                        shift
                    else
                        echo "Error: -L requires a level parameter."
                        exit 1
                    fi
                    ;;
                R) R_flag=true ;;
                P) 
                    if [[ "$#" -gt 2 && ! "$3" =~ ^- ]]; then
                        P_value="$3"
                        shift
                    else
                        echo "Error: -P requires a pattern parameter."
                        exit 1
                    fi
                    ;;
                h) h_flag=true # We do not need this anymore
                    help_function
                    exit 0 ;;
                I) 
                    if [[ "$#" -gt 2 && ! "$3" =~ ^- ]]; then
                        I_value="$3"
                        shift
                    else
                        echo "Error: -I requires a pattern parameter."
                        exit 1
                    fi
                    ;;
                *) 
                    echo "Unknown flag: -$flag"
                    help_function
                    exit 1
                    ;;
            esac
        done
        shift
    else
        echo "Unknown parameter: $1"
        exit 1
    fi
done

echo "a_flag: $a_flag"
echo "d_flag: $d_flag"
echo "l_flag: $l_flag"
echo "f_flag: $f_flag"
echo "L_value: $L_value"
echo "R_flag: $R_flag"
echo "P_value: $P_value"
echo "I_value: $I_value"
echo "h_flag: $h_flag"


if [ "$a_flag" = true ]; then
    for file in "$path"/* "$path"/.*; do
        if [ "$file" != "$path/." ] && [ "$file" != "$path/.." ]; then
            print_files_recursively "$path"
            exit 0
        fi
    done
fi

if [ "$d_flag" = true ]; then
    d_flag_function "$path"
    exit 0
fi



unset file_found

for file in "$path"/*; do
    if [ -f "$file" ]; then
        echo "$file"
        file_found=true
    fi
done

if [ -z "$file_found" ]; then
    echo "No files were found in the $path directory."
fi