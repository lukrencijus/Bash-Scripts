#!/usr/bin/env bash
PATH=.

help_function() {
    echo "Usage: $0 <directory> <parameters>
    <directory>   (Mandatory) Catalog path from where to start to.
    -a            All files are listed. if not specified, hidden files and catalogues are not listed.
    -d            List directories only.
    -l            Follow symbolic links like directories.
    -f            Print the full path prefix for each file.
    -L level      Descend only level directories deep.
    -R            Rerun the tree when the max dir level is reached (restart your tree program as a child in the level).
    -P pattern    List only those files that match the pattern given.
    -I pattern    Do not list files that match the given pattern.
    -h            Help (this message)."
}

file_found=false

main () {
local dir="$1"
local depth="$2"

depth=$((depth + 1))

if [ -n "$L_value" ]; then
    if [ "$depth" -gt "$L_value" ]; then
        return
    fi
fi

for file in "$dir"/* "$dir"/.*; do

    if [ -d "$file" ]; then
        if [ "$d_flag" = true ] || [ "$f_flag" = true ] || [ "$a_flag" = true ]; then
            if [ "$f_flag" = true ]; then
                if [[ -L "$file" && "$l_flag" = false ]]; then
                    continue
                fi
                echo "$file"
                main "$file" "$depth"
            else
                if [[ -L "$file" && "$l_flag" = false ]]; then
                    continue
                fi
                echo "${file##*/}"
                main "$file" "$depth"
            fi
        fi

    elif [ -f "$file" ]; then
        file_found=true
        if [ "$a_flag" = true ] || [[ "$f_flag" = true && "$d_flag" = false ]]; then
            if [ "$f_flag" = true ]; then
                echo "$file"
                main "$file" "$depth"
            else
                echo "${file##*/}"
                main "$file" "$depth"
            fi
        fi
    fi
done
}

default() {
    local dir="$1"
    for file in "$dir"/*; do

        if [ -L "$file" ]; then
            continue
        fi

        if [ -f "$file" ]; then
            echo "${file##*/}"
        elif [ -d "$file" ]; then
            default "$file"
        fi
    done
}

if [ "$#" -eq 0 ]; then
    help_function
    exit 1
fi

path=$1

if [ ! -e "$path" ]; then
    echo "Path: $path does not exist"
    exit 1
elif [ ! -d "$path" ]; then
    echo "Path: $path is not a directory"
    exit 1
fi

if [ "$#" -eq 1 ]; then
    for file in "$path"; do
        default "$file"
        exit 0
    done
fi

a_flag=false
d_flag=false
l_flag=false
f_flag=false
L_value=""
R_flag=false
P_value=""
I_value=""

while [[ "$#" -gt 1 ]]; do
    if [[ "$2" =~ ^-([a-zA-Z]+)$ ]]; then
        combined_flags="${BASH_REMATCH[1]}"
        for (( i=0; i<${#combined_flags}; i++ )); do
            flag="${combined_flags:$i:1}"
            case "$flag" in
                a) a_flag=true ;;
                d) d_flag=true ;;
                l) l_flag=true ;;
                f) f_flag=true;;
                L) 
                    if [[ "$#" -gt 2 && ! "$3" =~ ^- ]]; then
                        L_value="$3"
                        shift
                    else
                        echo "Error: -L requires a level parameter."
                        exit 1
                    fi
                    ;;
                R) R_flag=true ;;
                P) 
                    if [[ "$#" -gt 2 && ! "$3" =~ ^- ]]; then
                        P_value="$3"
                        shift
                    else
                        echo "Error: -P requires a pattern parameter."
                        exit 1
                    fi
                    ;;
                h)
                    help_function
                    exit 0 ;;
                I) 
                    if [[ "$#" -gt 2 && ! "$3" =~ ^- ]]; then
                        I_value="$3"
                        shift
                    else
                        echo "Error: -I requires a pattern parameter."
                        exit 1
                    fi
                    ;;
                *) 
                    echo "Unknown flag: -$flag"
                    help_function
                    exit 1
                    ;;
            esac
        done
        shift
    else
        echo "Unknown parameter: $1"
        exit 1
    fi
done

main "$path" 0

if [ "$file_found" = false ]; then
    echo "No files were found in the $path directory."
    exit 1
fi